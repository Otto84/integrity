{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ottaviocalabrese/Consensys/prgetto_finale_vero/integrity/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ottaviocalabrese/Consensys/prgetto_finale_vero/integrity/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/ottaviocalabrese/Consensys/prgetto_finale_vero/integrity/src/components/App.js\";\nimport Integrity from '../abis/Integrity.json';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  } //connecting the frontend to the contract through web3.js\n\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, integrity, filesCount, i, file;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; // Load account\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n\n              _this2.setState({\n                account: accounts[0]\n              }); // Network ID\n\n\n              _context3.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context3.sent;\n              networkData = Integrity.networks[networkId];\n\n              if (!networkData) {\n                _context3.next = 27;\n                break;\n              }\n\n              // Assign contract\n              integrity = new web3.eth.Contract(Integrity.abi, networkData.address);\n\n              _this2.setState({\n                integrity\n              }); // Get files amount\n\n\n              _context3.next = 14;\n              return integrity.methods.fileCount().call();\n\n            case 14:\n              filesCount = _context3.sent;\n\n              _this2.setState({\n                filesCount\n              }); // Load files&sort by the newest\n\n\n              i = filesCount;\n\n            case 17:\n              if (!(i >= 1)) {\n                _context3.next = 25;\n                break;\n              }\n\n              _context3.next = 20;\n              return integrity.methods.files(i).call();\n\n            case 20:\n              file = _context3.sent;\n\n              _this2.setState({\n                files: [..._this2.state.files, file]\n              });\n\n            case 22:\n              i--;\n              _context3.next = 17;\n              break;\n\n            case 25:\n              _context3.next = 28;\n              break;\n\n            case 27:\n              window.alert('Integrity contract not deployed to detected network.');\n\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  } // Get file from user\n\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result),\n          type: file.type,\n          name: file.name\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadFile = description => {\n      console.log(\"Submitting file to IPFS...\"); // Add file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('IPFS result', result.size);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        }); // Assign value for the file without extension\n\n        if (this.state.type === '') {\n          this.setState({\n            type: 'none'\n          });\n        }\n\n        this.state.integrity.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description, this.state.uploader).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false,\n            type: null,\n            name: null\n          });\n          window.location.reload();\n        }).on('error', e => {\n          window.alert('Error');\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.state = {\n      account: '',\n      integrity: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    };\n    this.uploadFile = this.uploadFile.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n      files: this.state.files,\n      captureFile: this.captureFile,\n      uploadFile: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ottaviocalabrese/Consensys/prgetto_finale_vero/integrity/src/components/App.js"],"names":["Integrity","React","Component","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","integrity","Contract","abi","address","methods","fileCount","call","filesCount","i","files","file","state","constructor","props","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","type","name","console","log","uploadFile","description","add","error","size","loading","hash","uploader","send","from","on","location","reload","e","bind","render"],"mappings":"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","sourcesContent":["import Integrity from '../abis/Integrity.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  //connecting the frontend to the contract through web3.js\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Integrity.networks[networkId]\n    if(networkData) {\n      // Assign contract\n      const integrity = new web3.eth.Contract(Integrity.abi, networkData.address)\n      this.setState({ integrity })\n      // Get files amount\n      const filesCount = await integrity.methods.fileCount().call()\n      this.setState({ filesCount })\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await integrity.methods.files(i).call()\n        this.setState({\n          files: [...this.state.files, file]\n        })\n      }\n    } else {\n      window.alert('Integrity contract not deployed to detected network.')\n    }\n  }\n\n  // Get file from user\n  captureFile = event => {\n    event.preventDefault()\n\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadFile = description => {\n    console.log(\"Submitting file to IPFS...\")\n\n    // Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('IPFS result', result.size)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      // Assign value for the file without extension\n      if(this.state.type === ''){\n        this.setState({type: 'none'})\n      }\n      this.state.integrity.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description, this.state.uploader).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({\n         loading: false,\n         type: null,\n         name: null\n       })\n       window.location.reload()\n      }).on('error', (e) =>{\n        window.alert('Error')\n        this.setState({loading: false})\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      integrity: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }\n    this.uploadFile = this.uploadFile.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}